// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum WorkType {
  remote
  hybrid
  onsite
}

enum JobType {
  fulltime
  parttime
  contract
  internship
}

enum Experience {
  entry
  mid
  senior
  executive
}

enum Status {
  IDLE
  OPENTOWORK
  HIRING
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ActivityType {
  JOB_PENDING
  JOB_ACCEPTED
  JOB_REJECTED
  FOLLOW
  UNFOLLOW
  FOLLOW_ACCEPTED
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model PostLike {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([postId, userId]) // one like per user per post
}

//this is for social feed schema
model Post {
  id       String   @id @default(uuid())
  author   User     @relation(fields: [authorId], references: [id])
  authorId String
  content  String
  imageUrl String[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  postlikes PostLike[]
  jobs      JobPost?   @relation(fields: [jobsId], references: [id])
  jobsId    String?    @unique // optional, because not every post has a jobPost
}

//this is for job schemas
model UserActivity {
  id           String       @id @default(uuid())
  userId       String
  type         ActivityType
  jobAppId     String?
  followId     String?
  targetUserId String?
  status       String?
  createdAt    DateTime     @default(now())

  user           User            @relation(fields: [userId], references: [id])
  jobApplication JobApplication? @relation(fields: [jobAppId], references: [id])
  follow         Follow?         @relation(fields: [followId], references: [id])

  @@index([userId, createdAt])
}

model Notification {
  id               String          @id @default(uuid())
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  jobApplication   JobApplication? @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId String? // optional
  message          String
  read             Boolean         @default(false)
  createdAt        DateTime        @default(now())
}

model ProfileView {
  id       String   @id @default(uuid())
  viewerId String
  userId   String // whose profile was viewed
  viewedAt DateTime @default(now())

  // relations
  viewer User @relation("viewer", fields: [viewerId], references: [id])
  user   User @relation("viewed", fields: [userId], references: [id])
}

model JobApplication {
  id          String @id @default(uuid())
  coverLetter String

  status ApplicationStatus @default(PENDING)
  viewed Boolean           @default(false)

  // Relations
  jobId  String
  userId String
  job    JobPost @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id])

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Notifications Notification[]
  UserActivity  UserActivity[]

  @@unique([jobId, userId])
}

model JobPost {
  id                  String     @id @default(uuid())
  title               String
  company             String
  location            String
  workType            WorkType
  jobType             JobType
  experience          Experience
  minSalary           Int
  maxSalary           Int
  currency            String
  description         String
  requirements        String[]
  benefits            String[]
  skills              String[]
  applicationDeadline String
  embedding           Float[]
  contactEmail        String
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  user            User             @relation(fields: [userId], references: [id])
  userId          String
  jobApplications JobApplication[]
  post            Post?
}

model Follow {
  id          String    @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?

  follower  User @relation("UserFollowing", fields: [followerId], references: [id])
  following User @relation("UserFollowers", fields: [followingId], references: [id])

  userActivity UserActivity[]

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Messages {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  sender User @relation(fields: [senderId], references: [id])
  chat   Chat @relation(fields: [chatId], references: [id])
}

model Chat {
  id           String            @id @default(uuid())
  createdAt    DateTime          @default(now())
  participants ChatParticipant[]
  messages     Messages[]
}

model ChatParticipant {
  id     String @id @default(uuid())
  chatId String
  userId String

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model User {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255) // maps to fullName
  email       String   @unique
  phone       String?  @unique
  location    String?
  title       String?
  experience  String?
  education   String?
  bio         String?
  skills      String[] // array of skills
  website     String?
  linkedin    String?
  github      String?
  jobType     String[] // array (e.g. ["full-time","part-time"])
  salaryRange String?
  remote      Boolean  @default(false)
  relocate    Boolean  @default(false)
  img         String? // profileImage
  resume      String?
  embedding   Float[]
  status      Status   @default(IDLE)
  createdAt   DateTime @default(now())

  jobs            JobPost[]
  jobApplications JobApplication[]
  profileViews    ProfileView[]    @relation("viewed") // views received
  viewsMade       ProfileView[]    @relation("viewer") // views made
  Notifications   Notification[]
  userActivities  UserActivity[]
  posts           Post[]
  comments        Comment[]

  // Follows I follow
  following Follow[] @relation("UserFollowing")
  // Users who follow me
  followers Follow[] @relation("UserFollowers")

  chatParticipants ChatParticipant[]
  //messages
  messages         Messages[]
  postlike         PostLike[]
}
